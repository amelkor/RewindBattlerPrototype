//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/App/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""151afa15-4847-4e48-b521-d96d1debf0fe"",
            ""actions"": [
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""da34325f-422a-46a0-8db5-069f32cc7b7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""65899528-a1db-4d91-b45f-5cac218b37ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwiftAttack"",
                    ""type"": ""Button"",
                    ""id"": ""72caff77-2a5a-4017-abe5-6e75f8e4a0fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StrongAttack"",
                    ""type"": ""Button"",
                    ""id"": ""76cde75b-5855-482c-b50c-f12e265a5bcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Looking"",
                    ""type"": ""Value"",
                    ""id"": ""a8c3e14d-5ca2-41ce-8247-67b5b00cc633"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac2ad827-9300-44ed-9d2e-6061d535f4a6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f06d5c44-41f4-4881-808e-61d91be06365"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2699385-7262-4809-adf6-9ee22b4c3e76"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SwiftAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""422fca4b-577c-4c6c-80e3-db044deb57a0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""StrongAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdce5b85-6e21-4b9b-a459-4f0e31cf7c2d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Looking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Dodge = m_Character.FindAction("Dodge", throwIfNotFound: true);
        m_Character_Block = m_Character.FindAction("Block", throwIfNotFound: true);
        m_Character_SwiftAttack = m_Character.FindAction("SwiftAttack", throwIfNotFound: true);
        m_Character_StrongAttack = m_Character.FindAction("StrongAttack", throwIfNotFound: true);
        m_Character_Looking = m_Character.FindAction("Looking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_Dodge;
    private readonly InputAction m_Character_Block;
    private readonly InputAction m_Character_SwiftAttack;
    private readonly InputAction m_Character_StrongAttack;
    private readonly InputAction m_Character_Looking;
    public struct CharacterActions
    {
        private @GameInput m_Wrapper;
        public CharacterActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dodge => m_Wrapper.m_Character_Dodge;
        public InputAction @Block => m_Wrapper.m_Character_Block;
        public InputAction @SwiftAttack => m_Wrapper.m_Character_SwiftAttack;
        public InputAction @StrongAttack => m_Wrapper.m_Character_StrongAttack;
        public InputAction @Looking => m_Wrapper.m_Character_Looking;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @Dodge.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDodge;
                @Block.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnBlock;
                @SwiftAttack.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwiftAttack;
                @SwiftAttack.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwiftAttack;
                @SwiftAttack.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnSwiftAttack;
                @StrongAttack.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnStrongAttack;
                @StrongAttack.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnStrongAttack;
                @StrongAttack.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnStrongAttack;
                @Looking.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLooking;
                @Looking.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLooking;
                @Looking.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnLooking;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @SwiftAttack.started += instance.OnSwiftAttack;
                @SwiftAttack.performed += instance.OnSwiftAttack;
                @SwiftAttack.canceled += instance.OnSwiftAttack;
                @StrongAttack.started += instance.OnStrongAttack;
                @StrongAttack.performed += instance.OnStrongAttack;
                @StrongAttack.canceled += instance.OnStrongAttack;
                @Looking.started += instance.OnLooking;
                @Looking.performed += instance.OnLooking;
                @Looking.canceled += instance.OnLooking;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICharacterActions
    {
        void OnDodge(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnSwiftAttack(InputAction.CallbackContext context);
        void OnStrongAttack(InputAction.CallbackContext context);
        void OnLooking(InputAction.CallbackContext context);
    }
}
